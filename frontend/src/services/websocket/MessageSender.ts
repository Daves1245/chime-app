import logger from '@/logger';
import { Message, ChimeMessage } from '@/types/Message';
import { ConnectionManager } from './ConnectionManager';
import { SubscriptionHandler } from './SubscriptionHandler';

const log = logger.child({ module: 'messageSender' });

/**
 * Handles sending messages through WebSocket connection
 */
export class MessageSender {
  constructor(
    private connectionManager: ConnectionManager,
    private subscriptionHandler: SubscriptionHandler
  ) {}

  /**
   * Send a generic Message
   */
  sendMessage(message: Message): void {
    const connectionState = this.connectionManager.getState();
    log.debug(
      {
        messageType: message.type,
        connectionState,
        isConnected: this.connectionManager.isConnected(),
        message: message,
      },
      'Attempting to send message'
    );

    if (!this.connectionManager.isConnected()) {
      const error = 'Cannot send message: WebSocket not connected';
      log.error(
        {
          messageType: message.type,
          connectionState,
        },
        error
      );
      throw new Error(error);
    }

    try {
      const serializedMessage = JSON.stringify(message);
      log.debug(
        {
          messageType: message.type,
          serializedLength: serializedMessage.length,
          serializedMessage,
        },
        'Serialized message for WebSocket'
      );

      this.connectionManager.send(serializedMessage);
      log.info(
        {
          messageType: message.type,
          success: true,
        },
        'Message successfully sent to WebSocket'
      );
    } catch (error) {
      log.error(
        {
          messageType: message.type,
          error: error instanceof Error ? error.message : error,
          stack: error instanceof Error ? error.stack : undefined,
        },
        'Failed to send message to WebSocket'
      );
      throw error;
    }
  }

  /**
   * Send a chat message
   */
  sendChatMessage(channelId: string, content: string): void {
    log.debug(
      {
        channelId,
        contentLength: content.length,
        content:
          content.substring(0, 100) + (content.length > 100 ? '...' : ''),
      },
      'Starting to send chat message'
    );

    const chimeMessage: ChimeMessage = {
      channelId,
      messageId: '', // Generated by server
      userId: '', // Will be set by server based on auth
      content,
      createdAt: new Date().toISOString(),
      editedAt: null,
      metadata: {},
    };

    log.debug(
      {
        chimeMessage,
        confirmedChannels: this.subscriptionHandler.getConfirmedChannels(),
      },
      'Created ChimeMessage object'
    );

    const message: Message = {
      type: 'message',
      message: chimeMessage,
    };

    log.debug({ message }, 'Created Message wrapper for WebSocket');

    try {
      this.sendMessage(message);
      log.info(
        {
          channelId,
          contentLength: content.length,
          success: true,
        },
        'Chat message successfully sent'
      );
    } catch (error) {
      log.error(
        {
          channelId,
          contentLength: content.length,
          error: error instanceof Error ? error.message : error,
        },
        'Failed to send chat message'
      );
      throw error;
    }
  }

  /**
   * Send handshake with channel subscriptions
   */
  sendHandshake(userChannels: string[]): void {
    const message: Message = {
      type: 'connect',
      config: { channels: userChannels },
    };

    this.sendMessage(message);
    log.info(
      {
        userChannels,
        count: userChannels.length,
      },
      'Sent handshake with user subscribed channels'
    );
  }

  /**
   * Get confirmed channels from subscription handler
   */
  getConfirmedChannels(): string[] {
    return this.subscriptionHandler.getConfirmedChannels();
  }
}
